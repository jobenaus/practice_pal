import Head from "next/head";
import Link from "next/link";

import { type AnkiConnectResponse } from "@/utils/types";

import { api } from "@/utils/api";
import { type NextPage } from "next";
import { useEffect } from "react";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  useEffect(() => {
    async function invoke(
      action: string,
      params: Record<string, unknown> = {},
      version = 6
    ) {
      const EXPECTED_NUM_FIELDS = 2;
      const ANKI_CONNECT_SERVER_URL = "http://127.0.0.1:8765";

      const response = await fetch(ANKI_CONNECT_SERVER_URL, {
        method: "POST",
        body: JSON.stringify({ action, version, params }),
      });

      if (!response.ok) {
        throw new Error("Failed to issue request.");
      }

      const data = (await response.json()) as AnkiConnectResponse;

      const numFields = Object.getOwnPropertyNames(data).length;
      if (numFields !== EXPECTED_NUM_FIELDS) {
        throw new Error(
          `Response has ${numFields} fields, expected ${EXPECTED_NUM_FIELDS}`
        );
      }

      if (!data.hasOwnProperty("error")) {
        throw new Error("Response is missing required error field");
      }

      if (!data.hasOwnProperty("result")) {
        throw new Error("Response is missing required result field");
      }

      if (data.error) {
        throw new Error(data.error);
      }

      return data.result;
    }

    async function fetchData() {
      try {
        // Ask user for permission to update configuration
        const userResponse = confirm(
          "This action will update your AnkiConnect configuration to allow cross-origin requests from our web application. Do you want to continue?"
        );
        if (!userResponse) {
          return;
        }

        // Request permission from AnkiConnect API
        const permissionResponse = await invoke("requestPermission");
        if (permissionResponse == "denied") {
          throw new Error("AnkiConnect permission denied");
        }

        await invoke("createDeck", { deck: "test1" });
        const result = await invoke("deckNames");
        console.log("got list of decks: ", result);
      } catch (e) {
        console.error(e);
      }
    }

    fetchData().catch((e) => console.error(e));
  }, []);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <p className="text-2xl text-white">
            {hello.data ? hello.data.greeting : "Loading tRPC query..."}
          </p>
        </div>
      </main>
    </>
  );
};

export default Home;
